type: edu
custom_name: stage5
files:
- name: machine/coffee_machine.py
  visible: true
  text: '# Write your code here'
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/fill_utils.py
  visible: true
  text: |-
    def execute_fill(available_ingredients):
        available_ingredients['water'] += int(input('Write how many ml of water you want to add:\n'))
        available_ingredients['milk'] += int(input('Write how many ml of milk you want to add:\n'))
        available_ingredients['coffee_beans'] += int(input('Write how many grams of coffee beans you want to add:\n'))
        available_ingredients['disposable_cups'] += int(input('Write how many disposable cups you want to add:\n'))
  learner_created: true
- name: machine/coffee.py
  visible: true
  text: |
    class Coffee:
        disposable_cups = 1

        def __init__(self, coffee_id: int, water: int, milk: int, coffee_beans: int, price: int):
            self.coffee_id: int = coffee_id
            self.water: int = water
            self.milk: int = milk
            self.coffee_beans: int = coffee_beans
            self.price: int = price
  learner_created: true
- name: machine/money.py
  visible: true
  text: |
    class MoneyBalance:
        def __init__(self, balance: int):
            self.balance: int = balance
  learner_created: true
- name: machine/buy_utils.py
  visible: true
  text: |
    from constants import COFFEE_DICT
    from money import MoneyBalance
    from coffee import Coffee


    def spend_ingredients(available_ingredients: dict, ordered_coffee: Coffee):
        available_ingredients['water'] -= ordered_coffee.water
        available_ingredients['milk'] -= ordered_coffee.milk
        available_ingredients['coffee_beans'] -= ordered_coffee.coffee_beans
        available_ingredients['disposable_cups'] -= ordered_coffee.disposable_cups


    def get_money(money_balance: MoneyBalance, ordered_coffee: Coffee):
        money_balance.balance += ordered_coffee.price


    def execute_buy(available_ingredients: dict, money_balance: MoneyBalance):
        coffee_kind_number: str = input('What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:\n')
        ordered_coffee: Coffee = COFFEE_DICT[coffee_kind_number]
        spend_ingredients(available_ingredients, ordered_coffee)
        get_money(money_balance, ordered_coffee)
  learner_created: true
- name: machine/take_utils.py
  visible: true
  text: |-
    from money import MoneyBalance


    def execute_take(money_balance: MoneyBalance):
        print(f'I gave you ${money_balance.balance}\n')
        money_balance.balance = 0
  learner_created: true
- name: machine/constants.py
  visible: true
  text: |
    from coffee import Coffee

    espresso: Coffee = Coffee(1, 250, 0, 16, 4)
    latte: Coffee = Coffee(2, 350, 75, 20, 7)
    cappuccino: Coffee = Coffee(3, 200, 100, 12, 6)

    COFFEE_DICT = {'1': espresso,
                   '2': latte,
                   '3': cappuccino}
  learner_created: true
- name: machine/common_utils.py
  visible: true
  text: |
    from money import MoneyBalance


    def print_state(available_ingredients, money):
        print(f'''The coffee machine has:
    {available_ingredients['water']} ml of water
    {available_ingredients['milk']} ml of milk
    {available_ingredients['coffee_beans']} g of coffee beans
    {available_ingredients['disposable_cups']} disposable cups
    ${money.balance} of money\n''')


    def get_action():
        return input('Write action (buy, fill, take):\n')


    def set_start_state() -> (MoneyBalance, dict):
        money_balance: MoneyBalance = MoneyBalance(550)
        available_ingredients: dict = {'water': 400,
                                       'milk': 540,
                                       'coffee_beans': 120,
                                       'disposable_cups': 9}
        return money_balance, available_ingredients
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5794#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 28 Aug 2022 14:39:59 UTC
record: 5
